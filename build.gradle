import org.apache.tools.ant.filters.*

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'idea'

group = 'com.github.tklae'
version = '0.6'

task wrapper(type: Wrapper) {
    gradleVersion = '1.9'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile "org.codehaus.groovy:groovy-all:2.2.1"
    compile "net.sourceforge.htmlunit:htmlunit:2.8"
    testCompile 'junit:junit:4.11'
}

publishing {
    publications {
        mavenCustom(MavenPublication) {
            pom.withXml {
                def pomDefinition = asNode()
                pomDefinition.appendNode('name', 'Jasmine Gradle Plugin')
                pomDefinition.appendNode('description', 'Use Jasmine to test javascript both in site and as part of a build. Biggest thanks to dzhaughnroth for coming up with this!')
                pomDefinition.appendNode('url', 'https://github.com/tklae/jasmine-gradle-plugin')
                pomDefinition.appendNode('inceptionYear', '2011')

                def scmFragment = '''
                <scm>
                    <url>https://github.com/tklae/jasmine-gradle-plugin</url>
                    <connection>scm:git://github.com/tklae/jasmine-gradle-plugin</connection>
                    <developerConnection>scm:git://github.com/tklae/jasmine-gradle-plugin</developerConnection>
                </scm>'''
                scmNode = new XmlParser(false, true).parseText(scmFragment)
                pomDefinition.append(scmNode)
            }
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}

afterEvaluate {
    def prTasks = sourceSets*.processResourcesTaskName.collect { tasks[it] };
    prTasks.each({
        it.configure({
            filter(ReplaceTokens, tokens: [version: project.version])
        })
    });
}

task clearCache() {
    doFirst {
        File f = file( "${System.getProperty("user.home")}/.gradle/cache/${project.group}/${project.name}" )
        println( "Deleting gradle cache at ${f.absolutePath}" );
        delete( f );
    }

}

def copyFile( from, to ) {
    delete to;
    to << from.text;
}

task cleanPluginTestArea( type: GradleBuild ) {
    dependsOn test
    dependsOn clearCache
    dependsOn publishToMavenLocal
    dir = "pluginTest"
    tasks = ["clean", "jasmineGenerate" ]
    createSubTaskStartParameters(startParameter)
    startParameter.projectProperties.put( "anExclude", "" );
    doLast {
        assert !file( "${dir}/build" ).exists();
    }
}

task pluginNotFailingTestTask( type: GradleBuild ) {
    dependsOn cleanPluginTestArea
    dir = "pluginTest"
    tasks = [ "check"]
    createSubTaskStartParameters(startParameter)
    startParameter.projectProperties.put( "anExclude", "**/MultiRunner.html" );
    doLast {
        copyFile( file( "${dir}/build/jasmine-summary.html" ),
                file( "${dir}/build/passingPluginTestTask-jasmine-summary.html" ) );
        checkDir( dir, 0, 0, 1, false );
    }
}

task pluginTestTask( type: GradleBuild ) {
    dependsOn test
    dependsOn clearCache
    dependsOn cleanPluginTestArea
    dir = "pluginTest"
    tasks = [ "check"]
    createSubTaskStartParameters(startParameter)
    startParameter.projectProperties.put( "anExclude", "" );
    doLast {
        copyFile( file( "${dir}/build/jasmine-summary.html" ),
                file( "${dir}/build/failingPluginTestTask-jasmine-summary.html" ) );
        checkDir( dir, 3, 1, 1, false );
    }
}

task generatorTestTask( type: GradleBuild ) {
    dependsOn test
    dependsOn clearCache
    dir = "generatorTest"
    tasks = ["clean", "jasmineGenerate", "check"]
    createSubTaskStartParameters(startParameter)
    doLast {
        checkDir( dir, 2, 1, 0, true );
    }
}

task debugBuildValues() {
    println "Running check task"
    println "Project group: ${project.group}"
    println "Project name: ${project.name}"
    println "Project version: ${version}"
}

def createSubTaskStartParameters(startParameter) {
    startParameter.projectProperties.put( "pluginGroup", "${project.group}" );
    startParameter.projectProperties.put( "pluginName", "${project.name}" );
    startParameter.projectProperties.put( "pluginVersion", "${version}" );
}

def checkDir( dir, specsFailed, pagesFailed, pagesPassed, jslintFailed ) {
    def exists = file( "${dir}/build/jasmine.failures" ).exists();
    assert exists == ( specsFailed > 0)
    def jslintExists = file( "${dir}/build/jasmine.jslint.failures" ).exists();
    assert jslintExists == jslintFailed;
    assert file( "${dir}/build/jasmine" ).exists();
    assert file( "${dir}/src/test/javascript/lib/MultiRunner.html" ).exists();
    def f = file( "${dir}/build/jasmine-summary.html" );
    assert f.exists();
    def text = f.text;

    assert specsFailed == (text =~ /Spec.*FAILED/).size();
    assert pagesFailed == (text =~ /FAILED page/).size();
    assert pagesPassed == (text =~ /Passed page/).size();
}

//Sometimes the check stage fails with a NullPointerException when doing a "gradle clean check", just run again with "gradle check"
//If that doesn't work it sometimes helps to delete the local mvn repository branch for this project if you've uploaded the jar
//via "gradle publishToMavenLocal"
//Might be caused by http://issues.gradle.org/browse/GRADLE-2034
check.dependsOn( debugBuildValues );
check.dependsOn( pluginTestTask );
check.dependsOn( pluginNotFailingTestTask );
check.dependsOn( generatorTestTask );